/**********************************************************************
 * desc:  socket definition
 *
 * vers:  unix or windows
 *
 * auth:  Chen Hu
 * date:  2004/01/01
 **********************************************************************/

#ifndef __SOCKET_H__
#define __SOCKET_H__

#include <stdio.h>
#include <map>
#include <vector>


#ifdef WIN32
/* Windows socket header file */
//#include <winsock2.h>
#include <winsock.h>
typedef int socklen_t;
#else //WIN32
/* Unix socket header file */
#include <fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <netdb.h>

typedef struct sockaddr SOCKADDR;
typedef struct sockaddr_in SOCKADDR_IN;
typedef int SOCKET;
#define closesocket close
#endif //WIN32

#ifndef O_NDELAY
#define O_NDELAY 0000004
#endif

#define MSG_EXPECTED 0x8

#define SOCKET_TYPE_TCP 1
#define SOCKET_TYPE_UDP 2


extern bool g_bInitialized;
#ifdef _test_connection
extern FILE  *gfpSocketTest;
#endif

class CSocket
{
public:
	CSocket();
    CSocket(SOCKET con_id); //带连接号的初始化
	virtual ~CSocket();

	SOCKET GetSock() { return m_hSocket; }
	bool IsOpen() {return m_bConnected; }

	SOCKADDR_IN& GetAddrIn() {
		return m_sin;
	}

	static void InitializeSock();

	//Create a socket
	bool Create(int nSockPort = 0, const char* pszSockAddr = NULL, int nType = 1);

	bool Bind(int nSockPort, const char* pszSockAddr = NULL);

	//Listening
	bool Listen(int nConnectionBacklog = 5);

	//Connect to a listenning socket
	bool Connect(int nHostPort, const char* pszHostAddr = NULL, int nTimeout = 1);
	bool Reconnect();
	bool ShutDown();

	//Accept a connection
	virtual bool Accept(CSocket& rConnectedSock, SOCKADDR* pAddr = NULL, int* pAddrLen = NULL);
	virtual bool Accept(CSocket* rConnectedSock, SOCKADDR* pAddr = NULL, int* pAddrLen = NULL);
	
	// Close current socket
	virtual void Close();
	
	// Recv specified length of data
	virtual int Read(void* lpBuf, int nBufLen, int nFlags = MSG_EXPECTED);
	virtual int Recv(void* lpBuf, int nBufLen, int nFlags = MSG_EXPECTED);
	// Send data
	virtual int Send(const void* lpBuf, int nBufLen, int nFlags = 0);
    static int SendData(SOCKET con_id,const void* lpBuf, int nBufLen, int nFlags = 0);

	bool SetBlockMode(bool blocking = true);
	//Return whether a blocking call is in progress
	bool IsBlocking();

	bool GetSockOpt(int nOptName, void* lpOptValue, int* lpOptLen, int nLevel = SOL_SOCKET);
	bool SetSockOpt(int nOptName, const void* lpOptValue, int lpOptLen, int nLevel = SOL_SOCKET);
	
	///////////////////////////////////////////////////////////////////
	//Event methods

	//Return whether there is data in the incomming buffer
	bool DataArrival(long waitMilliseconds = -1);
    bool SendReady(long waitMilliseconds = -1);
	
	static bool Select(CSocket* socks[], int nSocksCount, long waitMilliseconds = -1);
    static bool Select(std::map<int,CSocket *> &mapSck, int nSocksCount, long waitMilliseconds = -1);
    static bool Select(std::vector<CSocket *> &vSck, int nSocksCount, long waitMilliseconds = -1);
	bool IsSelected() { return m_bSelected; }
	
	virtual bool OnMessagePending() { return true;/*TODO*/ }
	virtual bool OnClose(int nErrCode) { return true; /*TODO*/ }

	const char* GetLastError() { return m_szLastErr; }
	bool IsClosed() { return !m_bConnected; }

    bool IsConnected() { return m_bConnected; }
    //提供一个外界可以设置该连接的连接类型
	int GetConnectFlag() { return m_nConnectFlag; }
    void SetConnectFlag(int nConnectFlag){m_nConnectFlag = nConnectFlag;};

	static int GetHostAddr(char* addr);
	static int GetHostAddr(struct in_addr*& addr, int& count);

	static int Addratoi(const char* addr);
	static void Addritoa(int nAddr,char * szAddr);


	char* GetHostIP();
    int   GetPort();


	//两个UDP的数据发送和接收函数
	int RecvBuf(char *Buf, int BufSize, char* FromIP, unsigned short &FromPort);
	int SendBuf(const char* ToIP, unsigned short ToPort, const char* Buf, int BufSize);

private:
	void initaddr(int nSockPort, const char* pszSockAddr = NULL);

private:
	SOCKET m_hSocket;
	SOCKADDR_IN m_sin;

	bool m_bConnected;
	bool m_bSelected;
    int m_nConnectFlag;//连接类型：0-普通连接；1-服务器监听连接；2-数据连接

	int m_nSocketType;//1-TCP ;2-UDP

	//Error message generated by the last unsuccessful call
	char m_szLastErr[256];

#ifdef WIN32
public:
	//static bool m_bInitialized;
#endif
};

//extern bool g_bInitialized;

#endif //__SOCKET_H__
